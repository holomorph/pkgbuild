diff --git a/config.mk b/config.mk
index 80dc936..fa19e58 100644
--- a/config.mk
+++ b/config.mk
@@ -10,6 +10,10 @@ MANPREFIX = ${PREFIX}/share/man
 X11INC = /usr/X11R6/include
 X11LIB = /usr/X11R6/lib
 
+# Pango
+PANGOLIBS = $(shell pkg-config --libs pango pangoxft)
+PANGOFLAGS = $(shell pkg-config --cflags pango pangoxft)
+
 # Xinerama, comment if you don't want it
 XINERAMALIBS  = -lXinerama
 XINERAMAFLAGS = -DXINERAMA
@@ -21,8 +25,8 @@ FREETYPEINC = /usr/include/freetype2
 #FREETYPEINC = ${X11INC}/freetype2
 
 # includes and libs
-INCS = -I${X11INC} -I${FREETYPEINC}
-LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS}
+INCS = -I${X11INC} -I${FREETYPEINC} ${PANGOFLAGS}
+LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS} ${PANGOLIBS}
 
 # flags
 CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_POSIX_C_SOURCE=2 -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
diff --git a/drw.c b/drw.c
index f49200b..8bb327c 100644
--- a/drw.c
+++ b/drw.c
@@ -4,6 +4,9 @@
 #include <string.h>
 #include <X11/Xlib.h>
 #include <X11/Xft/Xft.h>
+#include <pango/pango.h>
+#include <pango/pangoxft.h>
+#include <pango/pangofc-fontmap.h>
 
 #include "drw.h"
 #include "util.h"
@@ -110,6 +113,10 @@ drw_font_xcreate(Drw *drw, const char *fontname, FcPattern *fontpattern)
 	Fnt *font;
 	XftFont *xfont = NULL;
 	FcPattern *pattern = NULL;
+	PangoFontMap *fontmap;
+	PangoContext *context;
+	PangoFontDescription *desc;
+	PangoFontMetrics *metrics;
 
 	if (fontname) {
 		/* Using the pattern found at font->xfont->pattern does not yield same
@@ -139,11 +146,20 @@ drw_font_xcreate(Drw *drw, const char *fontname, FcPattern *fontpattern)
 	font = ecalloc(1, sizeof(Fnt));
 	font->xfont = xfont;
 	font->pattern = pattern;
-	font->ascent = xfont->ascent;
-	font->descent = xfont->descent;
+	fontmap = pango_xft_get_font_map(drw->dpy, drw->screen);
+	context = pango_font_map_create_context(fontmap);
+	desc = pango_fc_font_description_from_pattern(font->xfont->pattern, TRUE);
+	font->layout = pango_layout_new(context);
+	pango_layout_set_font_description(font->layout, desc);
+
+	metrics = pango_context_get_metrics(context, desc, NULL);
+	font->ascent = pango_font_metrics_get_ascent(metrics) / PANGO_SCALE;
+	font->descent = pango_font_metrics_get_descent(metrics) / PANGO_SCALE;
 	font->h = font->ascent + font->descent;
 	font->dpy = drw->dpy;
 
+	pango_font_metrics_unref(metrics);
+	g_object_unref(context);
 	return font;
 }
 
@@ -175,6 +191,8 @@ drw_font_free(Fnt *font)
 		return;
 	if (font->pattern)
 		FcPatternDestroy(font->pattern);
+	if(font->layout)
+		g_object_unref(font->layout);
 	XftFontClose(font->dpy, font->xfont);
 	free(font);
 }
@@ -350,6 +368,140 @@ drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, const char *tex
 	return x;
 }
 
+int
+drw_text_markup(Drw *drw, int x, int y, unsigned int w, unsigned int h, const char *text, int invert)
+{
+	char buf[1024];
+	int tx, ty, th;
+	Extnts tex;
+	XftDraw *d = NULL;
+	Fnt *curfont, *nextfont;
+	size_t i, len;
+	int utf8strlen, utf8charlen, render;
+	long utf8codepoint = 0;
+	const char *utf8str;
+	FcCharSet *fccharset;
+	FcPattern *fcpattern;
+	FcPattern *match;
+	XftResult result;
+	int charexists = 0;
+
+	if (!drw->scheme || !drw->fontcount)
+		return 0;
+
+	if (!(render = x || y || w || h)) {
+		w = ~w;
+	} else {
+		XSetForeground(drw->dpy, drw->gc, invert ?
+		               drw->scheme->fg->pix : drw->scheme->bg->pix);
+		XFillRectangle(drw->dpy, drw->drawable, drw->gc, x, y, w, h);
+		d = XftDrawCreate(drw->dpy, drw->drawable,
+		                  DefaultVisual(drw->dpy, drw->screen),
+		                  DefaultColormap(drw->dpy, drw->screen));
+	}
+
+	curfont = drw->fonts[0];
+	while (1) {
+		utf8strlen = 0;
+		utf8str = text;
+		nextfont = NULL;
+		while (*text) {
+			utf8charlen = utf8decode(text, &utf8codepoint, UTF_SIZ);
+			for (i = 0; i < drw->fontcount; i++) {
+				charexists = charexists || XftCharExists(drw->dpy, drw->fonts[i]->xfont, utf8codepoint);
+				if (charexists) {
+					if (drw->fonts[i] == curfont) {
+						utf8strlen += utf8charlen;
+						text += utf8charlen;
+					} else {
+						nextfont = drw->fonts[i];
+					}
+					break;
+				}
+			}
+
+			if (!charexists || (nextfont && nextfont != curfont))
+				break;
+			else
+				charexists = 0;
+		}
+
+		if (utf8strlen) {
+			drw_font_getexts_markup(curfont, utf8str, utf8strlen, &tex);
+			/* shorten text if necessary */
+			for (len = MIN(utf8strlen, (sizeof buf) - 1); len && (tex.w > w - drw->fonts[0]->h || w < drw->fonts[0]->h); len--)
+				drw_font_getexts_markup(curfont, utf8str, len, &tex);
+
+			if (len) {
+				memcpy(buf, utf8str, len);
+				buf[len] = '\0';
+				if (len < utf8strlen)
+					for (i = len; i && i > len - 3; buf[--i] = '.');
+
+				if (render) {
+					th = curfont->ascent + curfont->descent;
+					ty = y + (h / 2) - (th / 2);
+					tx = x + (h / 2);
+					pango_layout_set_markup(curfont->layout, buf, len);
+					pango_xft_render_layout(d, invert ? &drw->scheme->bg->rgb : &drw->scheme->fg->rgb, curfont->layout, tx * PANGO_SCALE, ty * PANGO_SCALE);
+					pango_layout_set_attributes(curfont->layout, NULL);
+				}
+				x += tex.w;
+				w -= tex.w;
+			}
+		}
+
+		if (!*text) {
+			break;
+		} else if (nextfont) {
+			charexists = 0;
+			curfont = nextfont;
+		} else {
+			/* Regardless of whether or not a fallback font is found, the
+			 * character must be drawn.
+			 */
+			charexists = 1;
+
+			if (drw->fontcount >= DRW_FONT_CACHE_SIZE)
+				continue;
+
+			fccharset = FcCharSetCreate();
+			FcCharSetAddChar(fccharset, utf8codepoint);
+
+			if (!drw->fonts[0]->pattern) {
+				/* Refer to the comment in drw_font_xcreate for more
+				 * information. */
+				die("the first font in the cache must be loaded from a font string.\n");
+			}
+
+			fcpattern = FcPatternDuplicate(drw->fonts[0]->pattern);
+			FcPatternAddCharSet(fcpattern, FC_CHARSET, fccharset);
+			FcPatternAddBool(fcpattern, FC_SCALABLE, FcTrue);
+
+			FcConfigSubstitute(NULL, fcpattern, FcMatchPattern);
+			FcDefaultSubstitute(fcpattern);
+			match = XftFontMatch(drw->dpy, drw->screen, fcpattern, &result);
+
+			FcCharSetDestroy(fccharset);
+			FcPatternDestroy(fcpattern);
+
+			if (match) {
+				curfont = drw_font_xcreate(drw, NULL, match);
+				if (curfont && XftCharExists(drw->dpy, curfont->xfont, utf8codepoint)) {
+					drw->fonts[drw->fontcount++] = curfont;
+				} else {
+					drw_font_free(curfont);
+					curfont = drw->fonts[0];
+				}
+			}
+		}
+	}
+	if (d)
+		XftDrawDestroy(d);
+
+	return x;
+}
+
 void
 drw_map(Drw *drw, Window win, int x, int y, unsigned int w, unsigned int h)
 {
@@ -367,6 +519,20 @@ drw_font_getexts(Fnt *font, const char *text, unsigned int len, Extnts *tex)
 	tex->w = ext.xOff;
 }
 
+void
+drw_font_getexts_markup(Fnt *font, const char *text, unsigned int len, Extnts *tex)
+{
+	XGlyphInfo ext;
+	PangoRectangle r;
+
+	XftTextExtentsUtf8(font->dpy, font->xfont, (XftChar8 *)text, len, &ext);
+	pango_layout_set_markup(font->layout, text, len);
+	pango_layout_get_extents(font->layout, 0, &r);
+	pango_layout_set_attributes(font->layout, NULL);
+	tex->h = r.height / PANGO_SCALE;
+	tex->w = r.width / PANGO_SCALE;
+}
+
 unsigned int
 drw_font_getexts_width(Fnt *font, const char *text, unsigned int len)
 {
diff --git a/drw.h b/drw.h
index e3b8515..7c180a6 100644
--- a/drw.h
+++ b/drw.h
@@ -17,6 +17,7 @@ typedef struct {
 	unsigned int h;
 	XftFont *xfont;
 	FcPattern *pattern;
+	PangoLayout *layout;
 } Fnt;
 
 typedef struct {
@@ -52,6 +53,7 @@ Fnt *drw_font_create(Drw *, const char *);
 void drw_load_fonts(Drw *, const char *[], size_t);
 void drw_font_free(Fnt *);
 void drw_font_getexts(Fnt *, const char *, unsigned int, Extnts *);
+void drw_font_getexts_markup(Fnt *, const char *, unsigned int, Extnts *);
 unsigned int drw_font_getexts_width(Fnt *, const char *, unsigned int);
 
 /* Colour abstraction */
@@ -69,6 +71,7 @@ void drw_setscheme(Drw *, ClrScheme *);
 /* Drawing functions */
 void drw_rect(Drw *, int, int, unsigned int, unsigned int, int, int, int);
 int drw_text(Drw *, int, int, unsigned int, unsigned int, const char *, int);
+int drw_text_markup(Drw *, int, int, unsigned int, unsigned int, const char *, int);
 
 /* Map functions */
 void drw_map(Drw *, Window, int, int, unsigned int, unsigned int);
diff --git a/dwm.c b/dwm.c
index ff7e096..982605f 100644
--- a/dwm.c
+++ b/dwm.c
@@ -40,6 +40,8 @@
 #include <X11/extensions/Xinerama.h>
 #endif /* XINERAMA */
 #include <X11/Xft/Xft.h>
+#include <pango/pango.h>
+#include <pango/pangoxft.h>
 
 #include "drw.h"
 #include "util.h"
@@ -56,6 +58,7 @@
 #define HEIGHT(X)               ((X)->h + 2 * (X)->bw)
 #define TAGMASK                 ((1 << LENGTH(tags)) - 1)
 #define TEXTW(X)                (drw_text(drw, 0, 0, 0, 0, (X), 0) + drw->fonts[0]->h)
+#define TEXTMW(X)               (drw_text_markup(drw, 0, 0, 0, 0, (X), 0) + drw->fonts[0]->h)
 
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
@@ -236,7 +239,7 @@ static void zoom(const Arg *arg);
 
 /* variables */
 static const char broken[] = "broken";
-static char stext[256];
+static char stext[1024];
 static int screen;
 static int sw, sh;           /* X display screen geometry width, height */
 static int bh, blw = 0;      /* bar geometry */
@@ -735,13 +738,13 @@ drawbar(Monitor *m)
 	x += w;
 	xx = x;
 	if (m == selmon) { /* status is only drawn on selected monitor */
-		w = TEXTW(stext);
+		w = TEXTMW(stext);
 		x = m->ww - w;
 		if (x < xx) {
 			x = xx;
 			w = m->ww - xx;
 		}
-		drw_text(drw, x, 0, w, bh, stext, 0);
+		drw_text_markup(drw, x, 0, w, bh, stext, 0);
 	} else
 		x = m->ww;
 	if ((w = x - xx) > bh) {
diff --git a/util.h b/util.h
index cded043..22d7a5e 100644
--- a/util.h
+++ b/util.h
@@ -1,7 +1,11 @@
 /* See LICENSE file for copyright and license details. */
 
+#ifndef MAX
 #define MAX(A, B)               ((A) > (B) ? (A) : (B))
+#endif /* MAX */
+#ifndef MIN
 #define MIN(A, B)               ((A) < (B) ? (A) : (B))
+#endif /* MIN */
 #define BETWEEN(X, A, B)        ((A) <= (X) && (X) <= (B))
 
 void die(const char *errstr, ...);
