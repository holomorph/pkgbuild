From 272a707dec83da20316ec0ebd79a31c7b6e14db6 Mon Sep 17 00:00:00 2001
From: Jari Vetoniemi <mailroxas@gmail.com>
Date: Thu, 17 Oct 2013 02:27:22 +0300
Subject: [PATCH] Pango support

---
 README    |  21 ++++++++--
 config.mk |   8 +++-
 dmenu.1   |   2 +-
 dmenu.c   |  39 ++++++++++++-------
 draw.c    | 130 ++++++++++++++++++++++++++++++++------------------------------
 draw.h    |  46 +++++++++++++---------
 6 files changed, 146 insertions(+), 100 deletions(-)

diff --git a/README b/README
index a8fcdfe..12e78a3 100644
--- a/README
+++ b/README
@@ -1,11 +1,11 @@
-dmenu - dynamic menu
+dmenu-pango-imlib - dynamic menu (with pango && imlib)
 ====================
-dmenu is an efficient dynamic menu for X.
+Pango and imlib patched dmenu.
 
 
 Requirements
 ------------
-In order to build dmenu you need the Xlib header files.
+In order to build dmenu-pango-imlib you need the Xlib, pango and imlib header/library files
 
 
 Installation
@@ -22,3 +22,18 @@ Afterwards enter the following command to build and install dmenu
 Running dmenu
 -------------
 See the man page for details.
+
+Thumbnails get cached to $XDG_DATA_HOME/dmenu/imlib.
+
+Pass -g to generate thumbnails immediatly for the piped images.
+Pass -is to specify image size (keeping aspect ratio).
+Note, that using too big images cause slowdown because images are loaded each time, selection image differs from last image.
+
+Example pipe listing with images:
+IMG:/mnt/pictures/lolcat.jpg\tThis is a lolcat\n
+IMG:/mnt/pictures/david.jpg\tThis is a picture of david\n
+This is a item without a picture\n
+
+Additional options:
+Pass -si to specify starting index to dmenu.
+ex. -si 5 to start from item 5.
diff --git a/config.mk b/config.mk
index c0d466b..c2c9cc5 100644
--- a/config.mk
+++ b/config.mk
@@ -8,13 +8,17 @@ MANPREFIX = ${PREFIX}/share/man
 X11INC = /usr/X11R6/include
 X11LIB = /usr/X11R6/lib
 
+# Pango
+XFTINC = `pkg-config --cflags xft pango pangoxft`
+XFTLIBS  = -lXrender -lfreetype -lz `pkg-config --libs xft pango pangoxft`
+
 # Xinerama, comment if you don't want it
 XINERAMALIBS  = -lXinerama
 XINERAMAFLAGS = -DXINERAMA
 
 # includes and libs
-INCS = -I${X11INC}
-LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS}
+INCS = -I${X11INC} ${XFTINC}
+LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${XFTLIBS}
 
 # flags
 CPPFLAGS = -D_BSD_SOURCE -D_POSIX_C_SOURCE=200809L -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
diff --git a/dmenu.1 b/dmenu.1
index bbee17d..6f3e3cd 100644
--- a/dmenu.1
+++ b/dmenu.1
@@ -58,7 +58,7 @@ dmenu is displayed on the monitor supplied.
 defines the prompt to be displayed to the left of the input field.
 .TP
 .BI \-fn " font"
-defines the font or font set used.
++defines the font or font set used. eg. "fixed" or "Monospace-12:normal" (an xft font)
 .TP
 .BI \-nb " color"
 defines the normal background color.
diff --git a/dmenu.c b/dmenu.c
index 8d9bbb6..8227800 100644
--- a/dmenu.c
+++ b/dmenu.c
@@ -15,8 +15,13 @@
 
 #define INTERSECT(x,y,w,h,r)  (MAX(0, MIN((x)+(w),(r).x_org+(r).width)  - MAX((x),(r).x_org)) \
                              * MAX(0, MIN((y)+(h),(r).y_org+(r).height) - MAX((y),(r).y_org)))
+#ifndef MIN
 #define MIN(a,b)              ((a) < (b) ? (a) : (b))
+#endif
+#ifndef MAX
 #define MAX(a,b)              ((a) > (b) ? (a) : (b))
+#endif
+#define DEFFONT "Monospace 12"
 
 typedef struct Item Item;
 struct Item {
@@ -37,6 +42,7 @@ static size_t nextrune(int inc);
 static void paste(void);
 static void readstdin(void);
 static void run(void);
+static void cleanup(void);
 static void setup(void);
 static void usage(void);
 
@@ -44,9 +50,9 @@ static char text[BUFSIZ] = "";
 static int bh, mw, mh;
 static int inputw, promptw;
 static size_t cursor = 0;
-static unsigned long normcol[ColLast];
-static unsigned long selcol[ColLast];
-static unsigned long outcol[ColLast];
+static ColorSet *normcol;
+static ColorSet *selcol;
+static ColorSet *outcol;
 static Atom clip, utf8;
 static DC *dc;
 static Item *items = NULL;
@@ -103,7 +109,8 @@ main(int argc, char *argv[]) {
 			usage();
 
 	dc = initdc();
-	initfont(dc, font);
+	initfont(dc, (font?font:DEFFONT));
+	atexit(cleanup);
 
 	if(fast) {
 		grabkeyboard();
@@ -120,6 +127,15 @@ main(int argc, char *argv[]) {
 }
 
 void
+cleanup(void) {
+	freecol(dc, normcol);
+	freecol(dc, selcol);
+	XDestroyWindow(dc->dpy, win);
+	XUngrabKeyboard(dc->dpy, CurrentTime);
+	freedc(dc);
+}
+
+void
 appenditem(Item *item, Item **list, Item **last) {
 	if(*last)
 		(*last)->right = item;
@@ -166,7 +182,7 @@ drawmenu(void) {
 	dc->x = 0;
 	dc->y = 0;
 	dc->h = bh;
-	drawrect(dc, 0, 0, mw, mh, True, BG(dc, normcol));
+	drawrect(dc, 0, 0, mw, mh, True, normcol->BG);
 
 	if(prompt && *prompt) {
 		dc->w = promptw;
@@ -177,7 +193,7 @@ drawmenu(void) {
 	dc->w = (lines > 0 || !matches) ? mw - dc->x : inputw;
 	drawtext(dc, text, normcol);
 	if((curpos = textnw(dc, text, cursor) + dc->h/2 - 2) < dc->w)
-		drawrect(dc, curpos, 2, 1, dc->h - 4, True, FG(dc, normcol));
+		drawrect(dc, curpos, 2, 1, dc->h - 4, True, normcol->FG);
 
 	if(lines > 0) {
 		/* draw vertical list */
@@ -538,12 +554,9 @@ setup(void) {
 	XineramaScreenInfo *info;
 #endif
 
-	normcol[ColBG] = getcolor(dc, normbgcolor);
-	normcol[ColFG] = getcolor(dc, normfgcolor);
-	selcol[ColBG]  = getcolor(dc, selbgcolor);
-	selcol[ColFG]  = getcolor(dc, selfgcolor);
-	outcol[ColBG]  = getcolor(dc, outbgcolor);
-	outcol[ColFG]  = getcolor(dc, outfgcolor);
+	normcol = initcolor(dc, normfgcolor, normbgcolor);
+	selcol = initcolor(dc, selfgcolor, selbgcolor);
+	outcol = initcolor(dc, outfgcolor, outbgcolor);
 
 	clip = XInternAtom(dc->dpy, "CLIPBOARD",   False);
 	utf8 = XInternAtom(dc->dpy, "UTF8_STRING", False);
@@ -600,7 +613,7 @@ setup(void) {
 
 	/* create menu window */
 	swa.override_redirect = True;
-	swa.background_pixel = normcol[ColBG];
+	swa.background_pixel = normcol->BG;
 	swa.event_mask = ExposureMask | KeyPressMask | VisibilityChangeMask;
 	win = XCreateWindow(dc->dpy, root, x, y, mw, mh, 0,
 	                    DefaultDepth(dc->dpy, screen), CopyFromParent,
diff --git a/draw.c b/draw.c
index 76f0c54..86ac458 100644
--- a/draw.c
+++ b/draw.c
@@ -7,11 +7,12 @@
 #include <X11/Xlib.h>
 #include "draw.h"
 
+#ifndef MAX
 #define MAX(a, b)  ((a) > (b) ? (a) : (b))
+#endif
+#ifndef MIN
 #define MIN(a, b)  ((a) < (b) ? (a) : (b))
-#define DEFAULTFN  "fixed"
-
-static Bool loadfont(DC *dc, const char *fontstr);
+#endif
 
 void
 drawrect(DC *dc, int x, int y, unsigned int w, unsigned int h, Bool fill, unsigned long color) {
@@ -23,34 +24,31 @@ drawrect(DC *dc, int x, int y, unsigned int w, unsigned int h, Bool fill, unsign
 }
 
 void
-drawtext(DC *dc, const char *text, unsigned long col[ColLast]) {
+drawtext(DC *dc, const char *text, ColorSet *col) {
 	char buf[BUFSIZ];
 	size_t mn, n = strlen(text);
 
 	/* shorten text if necessary */
-	for(mn = MIN(n, sizeof buf); textnw(dc, text, mn) + dc->font.height/2 > dc->w; mn--)
+	for(mn = MIN(n, sizeof buf); (text[mn] & 0xc0) == 0x80  || textnw(dc, text, mn) + dc->font.height/2 > dc->w; mn--)
 		if(mn == 0)
 			return;
 	memcpy(buf, text, mn);
 	if(mn < n)
 		for(n = MAX(mn-3, 0); n < mn; buf[n++] = '.');
 
-	drawrect(dc, 0, 0, dc->w, dc->h, True, BG(dc, col));
+	drawrect(dc, 0, 0, dc->w, dc->h, True, col->BG);
 	drawtextn(dc, buf, mn, col);
 }
 
 void
-drawtextn(DC *dc, const char *text, size_t n, unsigned long col[ColLast]) {
+drawtextn(DC *dc, const char *text, size_t n, ColorSet *col) {
 	int x = dc->x + dc->font.height/2;
-	int y = dc->y + dc->font.ascent+1;
-
-	XSetForeground(dc->dpy, dc->gc, FG(dc, col));
-	if(dc->font.set)
-		XmbDrawString(dc->dpy, dc->canvas, dc->font.set, dc->gc, x, y, text, n);
-	else {
-		XSetFont(dc->dpy, dc->gc, dc->font.xfont->fid);
-		XDrawString(dc->dpy, dc->canvas, dc->gc, x, y, text, n);
-	}
+	int y = dc->y + 1;
+
+	XSetForeground(dc->dpy, dc->gc, col->FG);
+	if(!dc->xftdraw) eprintf("error, xft drawable does not exist");
+	pango_layout_set_text(dc->plo, text, n);
+	pango_xft_render_layout(dc->xftdraw, &col->FG_xft, dc->plo, x * PANGO_SCALE, y * PANGO_SCALE);
 }
 
 void
@@ -69,18 +67,27 @@ eprintf(const char *fmt, ...) {
 }
 
 void
+freecol(DC *dc, ColorSet *col) {
+	if (!col) return;
+	XftColorFree(dc->dpy, DefaultVisual(dc->dpy, DefaultScreen(dc->dpy)),
+			DefaultColormap(dc->dpy, DefaultScreen(dc->dpy)), &col->FG_xft);
+	free(col);
+}
+
+void
 freedc(DC *dc) {
-	if(dc->font.set)
-		XFreeFontSet(dc->dpy, dc->font.set);
-	if(dc->font.xfont)
-		XFreeFont(dc->dpy, dc->font.xfont);
 	if(dc->canvas)
 		XFreePixmap(dc->dpy, dc->canvas);
-	XFreeGC(dc->dpy, dc->gc);
-	XCloseDisplay(dc->dpy);
-	free(dc);
+	if(dc->gc)
+		XFreeGC(dc->dpy, dc->gc);
+	if(dc->dpy)
+		XCloseDisplay(dc->dpy);
+	if(dc)
+		free(dc);
 }
 
+
+
 unsigned long
 getcolor(DC *dc, const char *colstr) {
 	Colormap cmap = DefaultColormap(dc->dpy, DefaultScreen(dc->dpy));
@@ -91,6 +98,20 @@ getcolor(DC *dc, const char *colstr) {
 	return color.pixel;
 }
 
+ColorSet *
+initcolor(DC *dc, const char *foreground, const char *background) {
+	ColorSet * col = (ColorSet *)malloc(sizeof(ColorSet));
+	if(!col) eprintf("error, cannot allocate memory for color set");
+	col->BG = getcolor(dc, background);
+	col->FG = getcolor(dc, foreground);
+	if (!XftColorAllocName(dc->dpy, DefaultVisual(dc->dpy, DefaultScreen(dc->dpy)),
+				DefaultColormap(dc->dpy, DefaultScreen(dc->dpy)), foreground, &col->FG_xft)) {
+		eprintf("error, cannot allocate xft font color '%s'\n", foreground);
+		free(col); col = NULL;
+	}
+	return col;
+}
+
 DC *
 initdc(void) {
 	DC *dc;
@@ -109,40 +130,22 @@ initdc(void) {
 
 void
 initfont(DC *dc, const char *fontstr) {
-	if(!loadfont(dc, fontstr ? fontstr : DEFAULTFN)) {
-		if(fontstr != NULL)
-			fprintf(stderr, "cannot load font '%s'\n", fontstr);
-		if(fontstr == NULL || !loadfont(dc, DEFAULTFN))
-			eprintf("cannot load font '%s'\n", DEFAULTFN);
-	}
+	PangoFontMetrics *metrics;
+	dc->pgc = pango_xft_get_context(dc->dpy, 0);
+	dc->pfd = pango_font_description_from_string(fontstr);
+	if(pango_font_description_get_size(dc->pfd) == 0)
+		pango_font_description_set_size(dc->pfd, 12 * PANGO_SCALE);
+
+	metrics = pango_context_get_metrics(dc->pgc, dc->pfd, pango_language_get_default());
+	dc->font.ascent = pango_font_metrics_get_ascent(metrics) / PANGO_SCALE;
+	dc->font.descent = pango_font_metrics_get_descent(metrics) / PANGO_SCALE;
+	pango_font_metrics_unref(metrics);
+
+	dc->plo = pango_layout_new(dc->pgc);
+	pango_layout_set_font_description(dc->plo, dc->pfd);
 	dc->font.height = dc->font.ascent + dc->font.descent;
 }
 
-Bool
-loadfont(DC *dc, const char *fontstr) {
-	char *def, **missing, **names;
-	int i, n;
-	XFontStruct **xfonts;
-
-	if(!*fontstr)
-		return False;
-	if((dc->font.set = XCreateFontSet(dc->dpy, fontstr, &missing, &n, &def))) {
-		n = XFontsOfFontSet(dc->font.set, &xfonts, &names);
-		for(i = 0; i < n; i++) {
-			dc->font.ascent  = MAX(dc->font.ascent,  xfonts[i]->ascent);
-			dc->font.descent = MAX(dc->font.descent, xfonts[i]->descent);
-			dc->font.width   = MAX(dc->font.width,   xfonts[i]->max_bounds.width);
-		}
-	}
-	else if((dc->font.xfont = XLoadQueryFont(dc->dpy, fontstr))) {
-		dc->font.ascent  = dc->font.xfont->ascent;
-		dc->font.descent = dc->font.xfont->descent;
-		dc->font.width   = dc->font.xfont->max_bounds.width;
-	}
-	if(missing)
-		XFreeStringList(missing);
-	return dc->font.set || dc->font.xfont;
-}
 
 void
 mapdc(DC *dc, Window win, unsigned int w, unsigned int h) {
@@ -151,24 +154,27 @@ mapdc(DC *dc, Window win, unsigned int w, unsigned int h) {
 
 void
 resizedc(DC *dc, unsigned int w, unsigned int h) {
+	int screen = DefaultScreen(dc->dpy);
 	if(dc->canvas)
 		XFreePixmap(dc->dpy, dc->canvas);
 
 	dc->w = w;
 	dc->h = h;
 	dc->canvas = XCreatePixmap(dc->dpy, DefaultRootWindow(dc->dpy), w, h,
-	                           DefaultDepth(dc->dpy, DefaultScreen(dc->dpy)));
+	                           DefaultDepth(dc->dpy, screen));
+	if(!dc->xftdraw) {
+		dc->xftdraw = XftDrawCreate(dc->dpy, dc->canvas, DefaultVisual(dc->dpy, screen), DefaultColormap(dc->dpy, screen));
+		if (!dc->xftdraw) eprintf("error, cannot create xft drawable\n");
+	}
+
 }
 
 int
 textnw(DC *dc, const char *text, size_t len) {
-	if(dc->font.set) {
-		XRectangle r;
-
-		XmbTextExtents(dc->font.set, text, len, NULL, &r);
-		return r.width;
-	}
-	return XTextWidth(dc->font.xfont, text, len);
+	int width, height;
+	pango_layout_set_text(dc->plo, text, len);
+	pango_layout_get_size(dc->plo, &width, &height);
+	return width / PANGO_SCALE;
 }
 
 int
diff --git a/draw.h b/draw.h
index 43a57bf..dd8dd26 100644
--- a/draw.h
+++ b/draw.h
@@ -1,32 +1,40 @@
 /* See LICENSE file for copyright and license details. */
 
-#define FG(dc, col)  ((col)[(dc)->invert ? ColBG : ColFG])
-#define BG(dc, col)  ((col)[(dc)->invert ? ColFG : ColBG])
-
-enum { ColBG, ColFG, ColBorder, ColLast };
+#include <pango/pango.h>
+#include <pango/pangoxft.h>
+#include <pango/pango-font.h>
 
 typedef struct {
-	int x, y, w, h;
-	Bool invert;
-	Display *dpy;
-	GC gc;
-	Pixmap canvas;
-	struct {
-		int ascent;
-		int descent;
-		int height;
-		int width;
-		XFontSet set;
-		XFontStruct *xfont;
-	} font;
+   int x, y, w, h;
+   Bool invert;
+   Display *dpy;
+   GC gc;
+   Pixmap canvas;
+   XftDraw *xftdraw;
+   PangoContext *pgc;
+   PangoLayout *plo;
+   PangoFontDescription *pfd;
+   struct {
+	int ascent;
+	int descent;
+	int height;
+	int width;
+   } font;
 } DC;  /* draw context */
 
+typedef struct {
+   unsigned long FG, BG;
+   XftColor FG_xft;
+} ColorSet;
+
 void drawrect(DC *dc, int x, int y, unsigned int w, unsigned int h, Bool fill, unsigned long color);
-void drawtext(DC *dc, const char *text, unsigned long col[ColLast]);
-void drawtextn(DC *dc, const char *text, size_t n, unsigned long col[ColLast]);
+void drawtext(DC *dc, const char *text, ColorSet *col);
+void drawtextn(DC *dc, const char *text, size_t n, ColorSet *col);
+void freecol(DC *dc, ColorSet *col);
 void eprintf(const char *fmt, ...);
 void freedc(DC *dc);
 unsigned long getcolor(DC *dc, const char *colstr);
+ColorSet *initcolor(DC *dc, const char *foreground, const char *background);
 DC *initdc(void);
 void initfont(DC *dc, const char *fontstr);
 void mapdc(DC *dc, Window win, unsigned int w, unsigned int h);
